'use strict';

const crypter = require('crypter');
const dbManager = require('dbManager');
const access = require('access');

let authorization = (postData, res) => {
    crypter.encryptUserData(postData, (username, password) => {
        let user = {
            username,
            password
        };

        dbManager.getUsers((arr) => {
            if (hasUser(user, arr)) {
                res.statusCode = 200;
                access.provide();
            } else {
                res.statusCode = 403;
            }

            res.end();
        });
    });
};

let registration = (postData, res) => {
    crypter.encryptUserData(postData, (username, password) => {
        let user = {
            username,
            password
        };

        dbManager.getUsers((arr) => {
            if (hasUser(user, arr)) {
                res.statusCode = 200;
                access.provide();
                res.end();
            } else {
                dbManager.writeNewUser(user, () => {
                    dbManager.createDb(user.username);
                    access.provide();
                    res.end();
                });
            }
        });


    });

    res.end();
};

let getTiles = (query, res) => {
    dbManager.getTiles(crypter.secUser(), (data) => {
        var decrypted = crypter.decryptTiles(data);
        res.end(JSON.stringify(decrypted));
    });
};

let saveChanges = (postData, res) => {
    let tile = JSON.parse(postData.tile);
    let index = postData.index;
    let encrypted = crypter.encryptTile(tile);

    dbManager.saveTile(crypter.secUser(), encrypted, index, () => {
        res.end();
    });
};

let addNewTile = (postData, res) => {
    let encrypted = crypter.encryptTile(postData);
    dbManager.addTile(encrypted, crypter.secUser(), () => {
        res.end();
    });
};

let removeTile = (postData, res) => {
    dbManager.removeTile(crypter.secUser(), postData.index, () => {
        res.end();
    });
};

let logout = (query, res) => {
    access.close();
    res.end();
};

//Внутренние функции
let hasUser = (user, arr) => {
    let isEqual = false;

    arr.forEach((item) => {
        if (user.username == item.username &&
            user.password == item.password) {
            isEqual = true;
        }
    });

    return isEqual;
};


//Экспорты
exports.authorization = authorization;
exports.registration = registration;
exports.getTiles = getTiles;
exports.saveChanges = saveChanges;
exports.addNewTile = addNewTile;
exports.logout = logout;
exports.removeTile = removeTile;
