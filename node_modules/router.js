'use strict';

const url = require('url');
const fs = require('fs');
const querystring = require('querystring');

const access = require('access');
const ajaxManager = require('ajaxManager');

let route = (req, res) => {
    let parsed = url.parse(req.url);
    let path = parsed.pathname;

    if (hasInPath(path, 'ajax')) {
        let command = getCommand(path);

        if (req.method == 'POST') {
            getPostData(req, function (postData) {
                ajaxManager[command](postData, res);
            });
        } else {
            ajaxManager[command](parsed.query, res);
        }

        return;
    }

    path = getPath(path);

    fs.readFile(path, (err, data) => {
        if (err) {
            console.log(err);
            res.end(`Failed`);
        }

        res.end(data);
    });
}

// Внутренние функции
let hasInPath = (path, string) => {
    return path.indexOf(string) != -1;
}

let getPath = (path) => {
    if (path == `/`) path = `/index.html`;
    if (path == `/favicon.ico`) path = `/assets/icons/favicon.ico`;

    if (hasInPath(path, 'html')) {
        if (!access.hasAccess()) {
            if (path == `/registration.html`) {
                path = `./view/pages/registration.html`
            } else {
                path = `./view/pages/login.html`;
            }
        } else {
            path = `./view/${path}`;
        }
    } else {
        path = `./view/${path}`;
    }

    return path;

}

let getCommand = (path) => {
    return path.substring(6);
}

let getPostData = (req, callback) => {
    if (req.method == 'POST') {
        var body = '';

        req.on('data', function (data) {
            body += data;

            if (body.length > 1e6) req.connection.destroy();
        });

        req.on('end', function () {
            var post = querystring.parse(body);
            callback(post);
        });
    }
}

// Экспорты
exports.route = route;
